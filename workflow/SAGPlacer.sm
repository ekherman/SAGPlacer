
from os.path import join
from os import listdir



configfile: "config/sagplacer.config.yaml"
localrules: cat_unpaired, bowtie_index, assembly_stats, get_aa

WORKING_DIR  = config["working_dir"]
INPUT_DIR = config["input"]
RESULTS_DIR = config["results"]
READ_INDEX = ['1', '2']

FASTQC_DIR = RESULTS_DIR + "fastqc/"
TRIMMOMATIC_DIR = RESULTS_DIR + "trimmomatic/"
SPADES_DIR = RESULTS_DIR + "spades/"
BOWTIE_DIR = RESULTS_DIR + "bowtie2/"
BUSCO_DIR = RESULTS_DIR + "busco/"
AUGUSTUS_DIR = RESULTS_DIR + "augustus/"
PANNZER_DIR = RESULTS_DIR + "pannzer/"
LOGS = RESULTS_DIR + "logs/"


FASTQC = config["fastqc"]
TRIMMOMATIC = config["trimmomatic"]
ADAPTERS = config["adapters"]
SPADES = config["spades"]
BOWTIE2 = config["bowtie2"]
BOWTIE_BUILD = config["bowtie2_build"]
SAMTOOLS = config["samtools"]
BUSCO = config["busco"]
BUSCO_CONFIG = config["busco_config"]
BUSCO_DB = config["busco_db"]
ASSEMBLY_STATS = config["stats"]
AUGUSTUS = config['augustus']
AUGUSTUS_CONFIG = config['augustus_config']
getAnnoFasta = config['getannofasta']
PANNZER = config['pannzer']


samples, = glob_wildcards(join(INPUT_DIR + "{sample}_R1.fastq.gz"))

rule final:
        input:
            expand(FASTQC_DIR + "{sample}_R{RR}_fastqc.zip", sample=samples, RR=READ_INDEX),
            expand(TRIMMOMATIC_DIR + "{sample}_R2.trimP.fastq.gz", sample=samples),
            expand(SPADES_DIR + "{sample}/stats.txt", sample=samples),
            expand(SPADES_DIR + "{sample}/scaffolds.rev.2.bt2", sample=samples),
            expand(FASTQC_DIR + "{sample}_R1.trimP_fastqc.zip", sample=samples),
            expand(BOWTIE_DIR + "{sample}.sorted.bam", sample=samples),
            expand(PANNZER_DIR + "{sample}.ANNO.pannzer.txt", sample=samples)


rule fastqc_1:
    input:
        INPUT_DIR + "{sample}_R{RR}.fastq.gz"
    output:
        FASTQC_DIR + "{sample}_R{RR}_fastqc.zip"
    threads: 1
    resources:
        cores = 1,
        runtime = 240,
        mem_mb = 4000,
    shell:
        """
        {FASTQC} -t {threads} --outdir {FASTQC_DIR} {input}
        """

rule trimmomatic:
    input:
        r1 = INPUT_DIR + "{sample}_R1.fastq.gz",
        r2 = INPUT_DIR + "{sample}_R2.fastq.gz"
    output:
        p1 = TRIMMOMATIC_DIR + "{sample}_R1.trimP.fastq.gz",
        p2 = TRIMMOMATIC_DIR + "{sample}_R2.trimP.fastq.gz",
        s1 = TRIMMOMATIC_DIR + "{sample}_R1.trimS.fastq.gz",
        s2 = TRIMMOMATIC_DIR + "{sample}_R2.trimS.fastq.gz",
    threads: 2
    resources:
        cores = 2,
        runtime = 240,
        mem_mb = 8000,
    log:
        LOGS + "trimmomatic-{sample}.summary"
    shell:
        "java -Xmx{resources.mem_mb}m -jar {TRIMMOMATIC} PE -threads {threads} \
                {input.r1} {input.r2} {output.p1} {output.s1} {output.p2} {output.s2} \
                ILLUMINACLIP:{ADAPTERS}:2:30:10:8:TRUE SLIDINGWINDOW:4:20 \
                MINLEN:50 -phred33 2> {log}"

rule cat_unpaired:
    input:
        s1 = TRIMMOMATIC_DIR + "{sample}_R1.trimS.fastq.gz",
        s2 = TRIMMOMATIC_DIR + "{sample}_R2.trimS.fastq.gz",
    output:
        TRIMMOMATIC_DIR + "{sample}.trimS.fastq.gz"
    shell:
        """
        cat {input.s1} {input.s2} > {output}
        """

rule fastqc_2:
    input:
        r1 = TRIMMOMATIC_DIR + "{sample}_R1.trimP.fastq.gz",
        r2 = TRIMMOMATIC_DIR + "{sample}_R2.trimP.fastq.gz"
    output:
        o1 = FASTQC_DIR + "{sample}_R1.trimP_fastqc.zip",
        o2 = FASTQC_DIR + "{sample}_R2.trimP_fastqc.zip"
    threads: 1
    resources:
        cores = 1,
        runtime = 240,
        mem_mb = 4000,
    shell:
        """
        {FASTQC} -t {threads} --outdir {FASTQC_DIR} {input.r1} {input.r2}
        """

rule spades:
    input:
        r1 = TRIMMOMATIC_DIR + "{sample}_R1.trimP.fastq.gz",
        r2 = TRIMMOMATIC_DIR + "{sample}_R2.trimP.fastq.gz",
        s = TRIMMOMATIC_DIR + "{sample}.trimS.fastq.gz"
    threads: 32
    resources:
        cores =32,
        runtime = 780,
        mem_mb = 125000,
    params:
        SPADES_DIR + "{sample}"
    output:
        SPADES_DIR + "{sample}/scaffolds.fasta"
    shell:
        """
        python {SPADES} \
        --sc \
        -t {threads} -m {resources.mem_mb} \
        -1 {input.r1} -2 {input.r2} \
        -s {input.s} \
        -o {params}
        """

rule assembly_stats:
    input:
        SPADES_DIR + "{sample}/scaffolds.fasta"
    output:
        SPADES_DIR + "{sample}/stats.txt"
    shell:
        """
        {ASSEMBLY_STATS} -l 100 {input} > {output}
        """

rule bowtie_index:
    input:
        ref = SPADES_DIR + "{sample}/scaffolds.fasta"
    params:
        SPADES_DIR + "{sample}/scaffolds"
    output:
        SPADES_DIR + "{sample}/scaffolds.rev.2.bt2"
    shell:
        """
        {BOWTIE_BUILD} {input.ref} {params}
        """

rule bowtie_align:
    input:
        bai = SPADES_DIR + "{sample}/scaffolds.rev.2.bt2",
        r1= TRIMMOMATIC_DIR + "{sample}_R1.trimP.fastq.gz",
        r2= TRIMMOMATIC_DIR + "{sample}_R2.trimP.fastq.gz",
    params:
        SPADES_DIR + "{sample}/scaffolds"
    output:
        BOWTIE_DIR + "{sample}.sam"
    threads: 2
    resources:
        cores = 2,
        runtime = 720,
        mem_mb = 8000,
    shell:
        """
        {BOWTIE2} -x {params} -1 {input.r1} -2 {input.r2} -S {output} -p {threads}
        """

rule sam_to_bam:
    input:
        BOWTIE_DIR + "{sample}.sam"
    output:
        BOWTIE_DIR + "{sample}.sorted.bam"
    threads: 2
    resources:
        cores = 2,
        runtime = 240,
        mem_mb = 8000,
    shell:
        """
        {SAMTOOLS} sort {input} -o {output}
        """

rule busco:
    input:
        SPADES_DIR + "{sample}/scaffolds.fasta"
    params:
        outdir = lambda wildcards: wildcards.sample,
        outpath = lambda wildcards: BUSCO_DIR + wildcards.sample
    output:
        complete = BUSCO_DIR + "{sample}/short_summary.specific." + BUSCO_DB + ".{sample}.txt"
    threads: 8
    resources:
        cores = 8,
        runtime = 480,
        mem_mb = 32000,
    shell:
        """
        {BUSCO} -i {input} -o {params.outdir} -m genome -l {BUSCO_DB} --config {BUSCO_CONFIG} --augustus --long -c {threads}
        mv  {params.outdir} {params.outpath}
        """

rule augustus:
    input:
        scaffolds = SPADES_DIR + "{sample}/scaffolds.fasta",
        species_path= BUSCO_DIR + "{sample}/run_" + BUSCO_DB + "/augustus_output/retraining_parameters/BUSCO_{sample}",
    params:
        new_cfg_path = AUGUSTUS_CONFIG + "species/BUSCO_{sample}",
        species = lambda wildcards: "BUSCO_" + wildcards.sample
    threads: 1
    resources:
        cores = 1,
        runtime = 480,
        mem_mb = 32000,
    output:
        AUGUSTUS_DIR + "{sample}.gff"
    shell:
        """
        cp -r {input.species_path} {params.new_cfg_path}  
        {AUGUSTUS} \
        --AUGUSTUS_CONFIG_PATH={AUGUSTUS_CONFIG} \
        --species={params.species} \
        {input.scaffolds} > {output}
        """

rule get_aa:
    input:
        gff = AUGUSTUS_DIR + "{sample}.gff",
        scaff = SPADES_DIR + "{sample}/scaffolds.fasta",
    output:
        AUGUSTUS_DIR + "{sample}.aa"
    shell:
        """
        {getAnnoFasta} --seqfile={input.scaff} {input.gff}
        """

rule pannzer:
    input:
        AUGUSTUS_DIR + "{sample}.aa"
    params:
        sam = lambda wildcards: wildcards.sample,
        out= "{sample}.pannzer.txt",
        de=  "{sample}.DE.pannzer.txt",
        go=  "{sample}.GO.pannzer.txt",
        anno=  "{sample}.ANNO.pannzer.txt",
    threads: 1
    resources:
        cores = 1,
        runtime = 240,
        mem_mb = 4000,
    output:
        out = PANNZER_DIR + "{sample}.pannzer.txt",
        de =  PANNZER_DIR + "{sample}.DE.pannzer.txt",
        go =  PANNZER_DIR + "{sample}.GO.pannzer.txt",
        anno =  PANNZER_DIR + "{sample}.ANNO.pannzer.txt",
    shell:
        """
        python {PANNZER} -m Pannzer -R  -i {input} \
        --PANZ_FILTER_PERMISSIVE \
        --PANZ_MINLALI 50 \
        --PANZ_MINPIDECUTOFF 0.4 \
        --PANZ_MAXPIDECUTOFF 1.0 \
        -B2G 40 \
        -s {params.sam} \
        -o '{params.out},{params.de},{params.go},{params.anno}'
        
        mv *.pannzer.txt {PANNZER_DIR}
        """
